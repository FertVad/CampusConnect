üìÖ Academic Calendar ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª–∏ + –≤—ã–±–æ—Ä –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞

–≠—Ç–æ—Ç –≥–∞–π–¥ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ¬´4¬†–Ω–µ–¥–µ–ª–∏ –≤¬†–º–µ—Å—è—Ü–µ¬ª –ø–æ–¥—Ö–æ–¥.

1.¬†–£—Ç–∏–ª–∏—Ç–∞ buildAcademicWeeks

src/utils/calendar.ts

import { addDays, addWeeks, isBefore, format } from "date-fns";
import ru from "date-fns/locale/ru";

export interface WeekCell {
  startDate: Date;        // —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å‚Äë—Å—Ç–∞—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏
  endDate: Date;          // +6¬†–¥–Ω–µ–π
  month: string;          // ¬´–°–µ–Ω—Ç—è–±—Ä—å¬ª –∏¬†—Ç.–¥.
  index: number;          // 1‚Ä¶N –ø–æ –ø–æ—Ä—è–¥–∫—É
}

export const buildAcademicWeeks = (
  startDate: Date,        // –¢–£–¢ –≤—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –±–µ–∑ –∞–≤—Ç–æ—Å–¥–≤–∏–≥–∞ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  totalYears = 4          // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
): WeekCell[] => {
  const weeks: WeekCell[] = [];
  let curr = new Date(startDate);          // –Ω–µ–¥–µ–ª—è ‚Ññ1: —Å—Ç–∞—Ä—Ç ‚â° –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
  const studyEnd = new Date(startDate.getFullYear() + totalYears, 7, 31); // 31¬†–∞–≤–≥
  let n = 1;

  while (isBefore(curr, addDays(studyEnd, 1))) {
    const end = addDays(curr, 6);
    weeks.push({
      startDate: curr,
      endDate: end,
      month: format(curr, "LLLL", { locale: ru }),
      index: n++,
    });
    curr = addWeeks(curr, 1);
  }
  return weeks;
};

2.¬†–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

src/components/ui/StartDatePicker.tsx

import { useState } from "react";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import ru from "date-fns/locale/ru";

export function StartDatePicker({ value, onChange }: { value: Date; onChange: (d: Date)=>void }) {
  const [open, setOpen] = useState(false);
  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button variant="outline" className="w-[200px] justify-start">
          {format(value, "d MMMM yyyy", { locale: ru })}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar
          initialFocus
          mode="single"
          selected={value}
          onSelect={(d)=> d && (onChange(d), setOpen(false))}
          weekStartsOn={1}
          locale={ru}
        />
      </PopoverContent>
    </Popover>
  );
}

3.¬†–í–∫–ª–∞–¥–∫–∞ ¬´–ì—Ä–∞—Ñ–∏–∫¬ª (–ø—Ä–∏–º–µ—Ä GraphTab.tsx)

import { useState, useMemo } from "react";
import { StartDatePicker } from "@/components/ui/StartDatePicker";
import { buildAcademicWeeks } from "@/utils/calendar";
import { AcademicCalendarTable } from "@/components/curriculum/AcademicCalendarTable";

export default function GraphTab({ planYear, yearsOfStudy }) {
  const defaultStart = new Date(planYear, 8, 1); // 1¬†—Å–µ–Ω—Ç
  const [startDate, setStartDate] = useState<Date>(defaultStart);

  const weeks = useMemo(() => buildAcademicWeeks(startDate, yearsOfStudy), [startDate, yearsOfStudy]);

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è:</span>
        <StartDatePicker value={startDate} onChange={setStartDate} />
      </div>

      <AcademicCalendarTable weeks={weeks} yearsOfStudy={yearsOfStudy} />
    </div>
  );
}

4.¬†–ü—Ä–∞–≤–∫–∏ AcademicCalendarTable

–ü—Ä–æ–ø—Å—ã

interface AcademicCalendarTableProps {
  weeks: WeekCell[];              // ‚Üê –Ω–æ–≤—ã–π
  yearsOfStudy: number;
  /* initialData, onChange ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
}

–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —à–∞–ø–æ–∫

// –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É
const monthGroups = useMemo(() => {
  return weeks.reduce((acc, w) => ((acc[w.month] ||= []).push(w), acc), {} as Record<string, WeekCell[]>);
}, [weeks]);

// –ú–µ—Å—è—Ü—ã
<tr>
  <th className="sticky left-0 ...">–ú–µ—Å—è—Ü—ã</th>
  {Object.entries(monthGroups).map(([m, list], i) => (
    <th key={m} colSpan={list.length} className={`px-2 py-1 text-center border-x ${i%2?'bg-slate-200':'bg-slate-100'} dark:bg-slate-800`}>{m}</th>
  ))}
</tr>

// –ù–µ–¥–µ–ª–∏
<tr>
  <th className="sticky left-0 ...">–ù–µ–¥–µ–ª–∏</th>
  {weeks.map((w, i) => (
    <th key={w.index} className={`w-8 text-xs font-semibold border-x text-center ${i%2?'bg-slate-200':'bg-slate-100'} dark:bg-slate-700`}>{w.index}</th>
  ))}
</tr>

–†–µ–Ω–¥–µ—Ä —è—á–µ–µ–∫ –∫—É—Ä—Å–∞

{weeks.map(w => {
  const cellKey = getCellKey(courseId, w.index);
  const activity = tableData[cellKey] || "";
  ...
  return (
    <td key={cellKey}
        title={`${format(w.startDate,'d¬†MMM',{locale:ru})} ‚Äì ${format(w.endDate,'d¬†MMM',{locale:ru})}`}
        className={`p-0 border-0 text-center cursor-pointer ${isSelected?'ring-2 ring-blue-500':''}`}
        onClick={() => handleCellClick({ courseId, weekNumber: w.index, monthName: w.month, value: activity })}>
      ...
    </td>
  );
})}

