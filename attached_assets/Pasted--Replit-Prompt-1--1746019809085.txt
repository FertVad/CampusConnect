✏️ Replit Prompt — Добавляем вкладку «Итоги» в учебный план

1. Общая задача

Сформировать под‑таб «Итоги» (summary view) — сводную таблицу по неделям и видам активности на все 4 курса (2 семестра × 52 недели). Таб переключается рядом с «График».

Считаем недели, а не дни.

Опираемся на уже используемые коды активностей: У, К, П, Э, Д, −.

Таблица должна автоматически пересчитаться после любого изменения календаря.

2. Новый util → utils/buildSummary.ts

import { ActivityType } from "@/components/curriculum/WeekActivityDialog";

type CalendarData = Record<string, ActivityType>;

export interface SummaryRow {
  activity: ActivityType; // "У" | "К" | …
  perCourse: {
    [course: number]: { sem1: number; sem2: number; total: number }
  };
  grandTotal: number;
}

export const buildSummary = (
  data: CalendarData,
  courses = 4,
): SummaryRow[] => {
  const rows: Record<ActivityType, SummaryRow> = {} as any;
  const acts: ActivityType[] = ["У","К","П","Э","Д","-"]; // порядок вывода

  acts.forEach(a => rows[a] = {
    activity: a,
    perCourse: {},
    grandTotal: 0,
  });

  for (let c = 1; c <= courses; c++) {
    for (let w = 1; w <= 52; w++) {
      const key = `course${c}_week${w}` as const;
      const act = (data[key] ?? "-") as ActivityType;
      const row = rows[act];
      const sem = w <= 26 ? "sem1" : "sem2";

      row.perCourse[c] ??= { sem1: 0, sem2: 0, total: 0 };
      row.perCourse[c][sem]++;
      row.perCourse[c].total++;
      row.grandTotal++;
    }
  }
  return acts.map(a => rows[a]);
};

3. Компонент → components/curriculum/SummaryTable.tsx

import React from "react";
import { ACTIVITY_TYPES, ActivityType } from "./WeekActivityDialog";
import { SummaryRow } from "@/utils/buildSummary";

export const SummaryTable: React.FC<{ summary: SummaryRow[]; courses: number }> = ({ summary, courses }) => (
  <table className="summary-table w-full border-collapse text-sm">
    <thead>
      <tr>
        <th rowSpan={2} className="sticky left-0 z-10 bg-slate-800 text-white px-3 py-1">Вид</th>
        {Array.from({ length: courses }, (_, i) => (
          <th key={i} colSpan={3}>Курс {i + 1}</th>
        ))}
        <th rowSpan={2}>Всего</th>
      </tr>
      <tr>
        {Array.from({ length: courses }, (_, i) => (
          <React.Fragment key={i}>
            <th>Сем 1</th><th>Сем 2</th><th>Σ</th>
          </React.Fragment>
        ))}
      </tr>
    </thead>
    <tbody>
      {summary.map(r => (
        <tr key={r.activity} className="odd:bg-slate-50 dark:odd:bg-slate-800/40">
          <td className="sticky left-0 bg-slate-700 text-white px-3 py-1 whitespace-nowrap">
            {ACTIVITY_TYPES[r.activity]} ({r.activity})
          </td>
          {Array.from({ length: courses }, (_, i) => {
            const v = r.perCourse[i + 1] ?? { sem1: 0, sem2: 0, total: 0 };
            return (
              <React.Fragment key={i}>
                <td className="text-center">{v.sem1 || ""}</td>
                <td className="text-center">{v.sem2 || ""}</td>
                <td className="text-center font-semibold">{v.total || ""}</td>
              </React.Fragment>
            );
          })}
          <td className="text-center font-bold">{r.grandTotal}</td>
        </tr>
      ))}
    </tbody>
  </table>
);

4. Подключаем вкладку

Файл pages/curriculum/EditPlanPage.tsx (или актуальный контейнер)

const [tab,setTab] = useState<'grafik'|'summary'>('grafik');

// … UI переключателя
<div className="flex gap-6 text-sm border-b mb-4">
  <button onClick={()=>setTab('grafik')}   className={tab==='grafik'   ? 'tab-active' : 'tab'}>График</button>
  <button onClick={()=>setTab('summary')} className={tab==='summary' ? 'tab-active' : 'tab'}>Итоги</button>
</div>

{tab==='grafik' && (
  <AcademicCalendarTable … onChange={setCalendarData} />
)}
{tab==='summary' && (
  <SummaryTable summary={buildSummary(calendarData,4)} courses={4} />
)}

calendarData — стейт, который уже хранит значения календаря (тот же объект, что передаётся в AcademicCalendarTable).