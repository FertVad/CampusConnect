Промт для Replit
(копируй всё целиком, это один запрос)

⸻

Что нужно сделать

Добавляем к таблице «Учебный план» поддержку иерархии:
	1.	Раздел (уровень 0, жирный, серый фон)
	2.	Группа дисциплин (уровень 1, зелёный фон)
	3.	Дисциплина (листовая строка, обычный фон)

Итого имеем дерево глубиной ≤ 2: «Раздел» → «Группа» → «Дисциплина».

⸻

1  UI-компоненты

Элемент	Детали
Кнопка «＋ строка»	Всегда внизу таблицы. При клике открывается pop-over: – «Раздел»– «Группа дисциплин»– «Дисциплина»
Отступы	padding-left × уровень (0 / 1 / 2)
Перетаскивание	Drag & drop только внутри одного родителя. Используй @dnd-kit или простейший HTML5 API.
Контекст-меню строки	ПКМ или ••• в конце строки:– «Добавить подгруппу» (для раздела)– «Добавить дисциплину» (для группы)– «Переименовать»– «Удалить»
Сворачивание	Иконка ▸/▾ слева от названия у раздела и группы.



⸻

2  Модель данных

interface PlanNodeBase {
  id: string;          // UUID в string формате
  title: string;
  parentId: string | null;
  type: 'section' | 'group' | 'subject';
}

interface Subject extends PlanNodeBase {
  type: 'subject';
  hours: number[];     // one number per semester
}

type PlanNode = PlanNodeBase | Subject;
type CurriculumPlan = PlanNode[]; // плоский список-дерево

Почему плоский массив: дешевле искать/обновлять, удобно хранить на сервере, легко восстанавливать порядок через orderIndex.

⸻

3  Локальная логика
	1.	Добавление — генерируешь uuid, parentId = выделенная строка (или null), title = «Новый …», для subject — hours = Array(semesters).fill(0).
	2.	Удаление — каскадно удаляем всех потомков.
	3.	Изменение часов — по двойному клику внутри ячейки → input type="number" min=0.
	4.	Суммы — для группы и раздела пересчитываются в useMemo по дочерним nodes.

⸻

4  Сохранение
	•	Один PATCH для всего дерева (/api/curriculum/plan).
	•	На клиенте используем «отложенный авто-save»:
	•	изменения буферизуются в local state;
	•	setTimeout 500 мс;
	•	если во время ожидания пришло новое изменение → перезапускаем таймер.

⸻

5  Миграция старых планов
	•	Если в базе уже лежат «плоские дисциплины» – при загрузке заворачиваем их в единственный «Раздел по умолчанию».
	•	Добавляем поле schemaVersion; при null → применяем миграцию выше.

⸻

6  Мини-ТЗ для верстки
	•	Таблица на <table> с CSS Grid вперёд не нужен.
	•	Фиксированная ширина колонки с названием — 260 px, остальное автодоля.
	•	Верстка резиновая, горизонтальный скролл при > 10 семестров.
	•	Светлая/тёмная тема из Tailwind v3 по существующей палитре.

⸻

7  Проверка/QA
	1.	Создать раздел → группу → 2 дисциплины.
	2.	Ввести случайные часы, убедиться, что суммы группы и раздела обновились.
	3.	Перетащить дисциплину в другую группу – проверяем, что parentId поменялся.
	4.	Удалить группу → дисциплины тоже исчезли.
	5.	Обновить страницу – структура и часы остались.

⸻

Ожидаемый результат

Редактор учебного плана позволяет:
	•	гибко строить древовидную структуру,
	•	мгновенно менять часы,
	•	видеть автосуммы,
	•	хранить всё одной пачкой на сервере.