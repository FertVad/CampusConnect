Вот более точный и прицельный Replit-промт, который вы можете скопировать и вставить слева в панель «Prompt» вашего Replit-AI:

# Улучшение UI таблицы «Учебный план»

Открой файл `client/src/components/curriculum/AcademicCalendarTable.tsx` и переделай разметку и стили таблицы «Учебный план» по этим шагам:

---

## 1. Жёсткие ширины через `<colgroup>` и `table-layout: fixed`
```diff
- <table className="w-full border-collapse">
+ <table className="table-fixed w-full border-collapse">
+   <colgroup>
+     <col className="w-[200px]" />           <!-- Дисциплины -->
+     <col className="w-[100px]" />           <!-- Форма контроля -->
+     <col className="w-[80px]" />            <!-- Итог акад.часов -->
+     <col className="w-[80px]" />            <!-- Объем ОП -->
+     {semesters.map((_, i) => (
+       <col key={i} className="w-[60px]" />  <!-- Каждый семестр -->
+     ))}
+   </colgroup>



⸻

2. Трёхуровневые заголовки с sticky top-0

<thead className="sticky top-0 z-20">
  {/* 1-й уровень: Курсы */}
  <tr>
    <th rowSpan={3} className="sticky left-0 bg-slate-900 text-white px-2">Дисциплины</th>
    <th rowSpan={3} className="bg-slate-800 text-white text-center px-2">Форма контроля</th>
    <th rowSpan={3} className="bg-slate-800 text-white text-center px-2">Итог акад.часов</th>
    <th rowSpan={3} className="bg-slate-800 text-white text-center px-2">Объем ОП</th>
    {courses.map((_, idx) => (
      <th key={idx} colSpan={semestersPerCourse} className="bg-slate-700 text-white text-center">
        Курс {idx + 1}
      </th>
    ))}
  </tr>
  {/* 2-й уровень: Семестры */}
  <tr>
    {courses.flatMap((_, ci) =>
      semestersPerCourse.map((sem, si) => (
        <th key={`${ci}-${si}`} className="bg-slate-600 text-white text-center text-xs whitespace-nowrap">
          Семестр {ci * semestersPerCourse + si + 1} ({sem} нед.)
        </th>
      ))
    )}
  </tr>
  {/* 3-й уровень: Тип часов */}
  <tr>
    {courses.flatMap((_, ci) =>
      semestersPerCourse.map((_, si) => (
        ["Лек", "Лаб", "Пр", "КР", "Итог"].map((t, ti) => (
          <th
            key={`${ci}-${si}-${ti}`}
            className="bg-slate-500 text-[10px] text-white rotate-header"
            title={t}
          >
            {t}
          </th>
        ))
      ))
    )}
  </tr>
</thead>

Добавь в глобальные стили (или в модуль):

.rotate-header {
  transform: rotate(-90deg);
  transform-origin: bottom left;
  white-space: nowrap;
}



⸻

3. Обрезка и тултипы

Во всех <th> и <td> добавь:

overflow-hidden text-ellipsis whitespace-nowrap px-2 py-1

И для заголовков третьего уровня при наведении показывай полный текст через title.

⸻

4. «Итого» внизу

<tfoot className="sticky bottom-0 bg-slate-800 text-white">
  <tr>
    <td className="sticky left-0 bg-slate-900">Итого</td>
    <td colSpan={3}></td>
    {totals.map((sum, i) => (
      <td key={i} className="text-center">{sum}</td>
    ))}
  </tr>
</tfoot>



⸻

5. Фиксированный левый столбец

Для <th> и <td> первой колонки:

sticky left-0 bg-slate-900 z-20  /* для заголовка */
sticky left-0 bg-slate-800       /* для ячеек */



⸻

6. Проверка
	•	При ширине экрана 1280px шапка и первый столбец остаются фиксированными.
	•	Текст заголовков читаем (аббревиатуры + тултип).
	•	Строки/колонки не наслаиваются.
	•	«Итого» всегда видимо.

Сохрани изменения и убедись, что UI стал аккуратным и читабельным.