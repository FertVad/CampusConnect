        .every((day) => day.selected);

      // Если все рабочие дни выбраны, снима �м выбор, иначе выбираем все
      for (let i = 0; i < 5; i++) {
        // Пн-Пт (индексы 0-4)
        newDays[i].selected = !allWorkdaysSelected;
      }

      setWeekDays(newDays);
      setHasSelectedDays(newDays.some((day) => day.selected));
    } else {
      // Одинарный клик - инвертируем выбор дня
      const newDays = [...weekDays];

      // Если день уже выбран, снимаем выбор
      if (newDays[index].selected) {
        newDays[index].selected = false;
      } else {
        // Если день не выбран, выбираем его
        newDays[index].selected = true;

        // Если выбрана активность, сразу же применяем её к выбранному дню
        if (selectedActivity) {
          newDays[index].activity = selectedActivity;

          // убираем подсветку // флаг выделения = false        // Radio‑кнопка — в "ничего"
              newDays[index].selected = false;   
              setHasSelectedDays(false);         
              setSelectedActivity("");          
        }
      }

      setWeekDays(newDays);
      setHasSelectedDays(newDays.some((day) => day.selected));
    }

    setLastClickTime(now);
  };

  // Обработчик выбора активности
  // helper — снимает выделение со всех дней
  const clearSelection = (days: WeekDay[]) =>
    days.map((d) => ({ ...d, selected: false }));

  // ===== 1. handleActivitySelect =====
  const handleActivitySelect = (value: string) => {
    const activityValue = value as ActivityType;

    // если нет выделенных дней — просто запоминаем радиокнопку
    if (!hasSelectedDays) {
      setSelectedActivity(activityValue);
      return;
    }

    // применяем активность к выделенным дням + снимаем выделение
    const updatedDays = weekDays.map((day) =>
      day.selected ? { ...day, activity: activityValue, selected: false } : day,
    );

    setWeekDays(updatedDays);
    setHasSelectedDays(false);
    setSelectedActivity(""); // сброс выбранной активности
  };

  // ===== 2. handleSave =====
  const handleSave = () => {
    let finalDays = weekDays;

    // если остались выделенные дни с выбранной активностью — применяем
    if (hasSelectedDays && selectedActivity) {
      finalDays = weekDays.map((day) =>
        day.selected
          ? { ...day, activity: selectedActivity, selected: false }
          : day,
      );
    }

    // конвертируем в строку фиксированной длины 7 (пробел вместо пустого)
    const activitiesString = finalDays.map(d => d.activity || ' ').join('');

    onActivityChange(
      activitiesString.trim() ? (activitiesString as ActivityType) : "",
    );

    // закрываем диалог и сбрасываем вспомогательные состояния
    onOpenChange(false);
    setWeekDays(finalDays);
    setHasSelectedDays(false);
    setSelectedActivity("");
  };

  // Стиль для дня недели в зависимости от активности и выбранности
  const getDayStyle = (day: WeekDay) => {
    let baseStyle = "";

    // Установка базового стиля для дня
    if (!day.activity && !day.selected) {
      // Если нет активности и день не выбран - стандартный фон
      baseStyle =
        "bg-slate-50 dark:bg-slate-800 text-slate-800 dark:text-white";
    } else if (day.selected) {
      // Если день выбран - показываем прозрачным цветом активности или предварительный выбор
      if (selectedActivity && selectedActivity in ACTIVITY_COLORS) {
        // Используем цвет выбранной активности для предпросмотра
        const previewColorStyle =
          ACTIVITY_COLORS[selectedActivity as Exclude<ActivityType, "">];
        baseStyle = `${previewColorStyle.bg} text-slate-800 ring-2 ring-blue-600 dark:ring-blue-400`;
      } else {
        // Если активность не выбрана, но день выделен
        baseStyle =
          "bg-slate-100 dark:bg-slate-700 text-slate-800 dark:text-white ring-2 ring-blue-600 dark:ring-blue-400";
      }
    } else if (day.activity && day.activity in ACTIVITY_COLORS) {
      // Если у дня есть активность и он не выбран
      const colorStyle =
        ACTIVITY_COLORS[day.activity as Exclude<ActivityType, "">];
      baseStyle = `${colorStyle.bg} text-slate-800`;
    } else if (day.activity) {
      // Если у дня активность не из предопределенных - используем нейтральный цвет
      baseStyle =
        "bg-slate-200 dark:bg-slate-600 text-slate-800 dark:text-white";
    }

    return baseStyle;
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      {open && weekInfo && (
        <DialogContent
          key={`dialog-week-${weekInfo.courseId}-${weekInfo.weekNumber}`}
          className="sm:max-w-md calendar-dialog-content"
        >
          <DialogHeader>
            <DialogTitle>
              Активность для недели {weekInfo.weekNumber}
            </DialogTitle>
            <DialogDescription>
              {weekInfo.monthName}, курс {weekInfo.courseId}
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4" onClick={handleContainerClick}>
            <div
              className="p-4 bg-slate-50 dark:bg-slate-900 rounded-md border border-slate-200 dark:border-slate-700"
              onDoubleClick={(e) => {
                // Обработка двойного клика по всей области
                e.preventDefault(); // Предотвращаем выделение текста

                // Проверяем наличие выбранных дней
                const hasSelected = weekDays.some((day) => day.selected);

                if (hasSelected) {
                  // Если есть выбранные дни - сбрасываем все выделения
                  const updatedDays = weekDays.map((day) => ({
                    ...day,
                    selected: false,
                  }));
                  setWeekDays(updatedDays);
                  setHasSelectedDays(false);
                } else {
                  // Если выделенных дней нет - проверяем состояние рабочих дней
                  const newDays = [...weekDays];

                  // Проверяем, все ли рабочие дни (Пн-Пт) имеют одинаковую активность
                  const workdays = newDays.slice(0, 5);
                  const firstActivity = workdays[0].activity;
                  const allHaveSameActivity =
                    firstActivity &&
                    workdays.every((day) => day.activity === firstActivity);

                  // Если все рабочие дни имеют одинаковую непустую активность,
                  // то при двойном клике очищаем их активность
                  if (allHaveSameActivity) {
                    for (let i = 0; i < 5; i++) {
                      // Пн-Пт (индексы 0-4)
                      newDays[i].selected = true;
                      newDays[i].activity = ""; // Очищаем активность
                    }
                  } else {
                    // Иначе выбираем все рабочие дни и устанавливаем им текущую активность
                    for (let i = 0; i < 5; i++) {
                      // Пн-Пт (индексы 0-4)
                      newDays[i].selected = true;

                      // Если выбрана активность, применяем её
                      if (selectedActivity) {
                        newDays[i].activity = selectedActivity;
                      }
                    }
                  }

                  setWeekDays(newDays);
                  setHasSelectedDays(true);
                }
              }}
            >
              <div className="grid grid-cols-7 gap-2 week-days-grid">
                {weekDays.map((day, i) => (
                  <div
                    key={i}
                    className={`flex flex-col items-center justify-center p-2 rounded cursor-pointer transition-all ${getDayStyle(day)}`}
                    onClick={(e) => {
                      e.stopPropagation(); // Останавливаем всплытие события
                      handleDayClick(i);
                    }}
                  >
                    <div className="text-xs font-semibold">{day.name}</div>
                    <div className="text-sm font-bold">{day.date}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="text-sm font-medium mb-1">
                Выберите тип активности:
              </h4>
              <RadioGroup
                value={selectedActivity}
                onValueChange={handleActivitySelect}
                className="grid grid-cols-1 gap-2"
              >
                {Object.entries(ACTIVITY_TYPES).map(([code, description]) => {
                  const colorStyle =
                    ACTIVITY_COLORS[code as Exclude<ActivityType, "">];
                  return (
                    <div
                      key={code}
                      className={`flex items-center space-x-2 p-2 rounded-md ${colorStyle.hoverBg} transition-colors`}
                    >
                      <RadioGroupItem value={code} id={`activity-${code}`} />
                      <Label
                        htmlFor={`activity-${code}`}
                        className="flex items-center cursor-pointer"
                      >
                        <span
                          className={`font-semibold text-sm mr-2 w-8 h-8 flex items-center justify-center rounded ${colorStyle.bg} ${colorStyle.text}`}
                        >
                          {code}
                        </span>
                        <span>{description}</span>
                      </Label>
                    </div>
                  );
                })}
                <div className="flex items-center space-x-2 p-2 rounded-md hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors">
                  <RadioGroupItem value="" id="activity-none" />
                  <Label
                    htmlFor="activity-none"
                    className="flex items-center cursor-pointer"
                  >
                    <span className="font-semibold text-sm mr-2 w-8 h-8 flex items-center justify-center rounded bg-white dark:bg-slate-600 dark:text-white border">
                      —
                    </span>
                    <span>Нет активности</span>
                  </Label>
                </div>
              </RadioGroup>
            </div>
          </div>

          <div className="pt-3 border-t">
            <h4 className="text-sm font-medium mb-2">Отдельные дни недели:</h4>
            <div className="grid grid-cols-7 gap-1 mb-4">
              {weekDays.map((day, idx) => {
                const colorStyle = day.activity && day.activity in ACTIVITY_COLORS
                  ? ACTIVITY_COLORS[day.activity as Exclude<ActivityType, "">]
                  : { bg: "bg-slate-100", text: "text-slate-700", hoverBg: "hover:bg-slate-200" };
                
                return (
                  <div key={`day-selector-${idx}`} className="flex flex-col items-center">
                    <RadioGroup 
                      value={day.activity} 
                      onValueChange={(value) => {
                        const newDays = [...weekDays];
                        newDays[idx].activity = value as ActivityType;
                        setWeekDays(newDays);
                      }}
                      className="flex flex-col gap-1 items-center"
                    >
                      <div 
                        className={`flex flex-col items-center cursor-pointer p-2 rounded ${day.activity ? colorStyle.bg : 'bg-slate-100'} ${colorStyle.hoverBg}`}
                      >
                        <div className="text-[10px] font-medium mb-1">{day.name}</div>
                        <div className="text-sm font-bold">{day.date}</div>
                      </div>
                      
                      {Object.keys(ACTIVITY_TYPES).map((code) => (
                        <RadioGroupItem 
                          key={`day-${idx}-${code}`} 
                          value={code} 
                          id={`day-${idx}-${code}`} 
                          className="sr-only" 
                        />
                      ))}
                    </RadioGroup>
                    <div className="text-center mt-1 text-sm font-bold">
                      {day.activity || "–"}
                    </div>
                  </div>
                )
              })}
            </div>
            
            <div className="flex justify-center mb-4">
              <Button 
                variant="secondary" 
                onClick={() => {
                  // Находим наиболее часто встречающуюся активность
                  if (!selectedActivity || selectedActivity === "") {
                    // Если активность не выбрана, ничего не делаем
                    return;
                  }
                  
                  // Применяем выбранную активность ко всем дням недели
                  const newDays = weekDays.map(day => ({
                    ...day,
                    activity: selectedActivity
                  }));
                  
                  setWeekDays(newDays);
                }}
                className="w-full"
                disabled={!selectedActivity}
              >
                Применить "{selectedActivity}" ко всей неделе
              </Button>
            </div>
          </div>
          
          <DialogFooter className="sm:justify-between">
            <Button variant="outline" onClick={() => onOpenChange(false)}>
              Отмена
            </Button>
            <Button
              onClick={handleSave}
              className="bg-blue-600 hover:bg-blue-700"
              disabled={
                weekDays.every((day) => !day.activity) && !hasSelectedDays
              }
            >
              Сохранить
            </Button>
          </DialogFooter>
        </DialogContent>
      )}
    </Dialog>
  );
}
